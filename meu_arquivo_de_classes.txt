//src/main/java/br/com/tourapp/util/Constants.java
package br.com.tourapp.util;

/**
 * Constantes da aplicação
 */
public final class Constants {

    // Roles de usuário
    public static final String ROLE_CLIENTE = "ROLE_CLIENTE";
    public static final String ROLE_ORGANIZADOR = "ROLE_ORGANIZADOR";
    public static final String ROLE_ADMIN = "ROLE_ADMIN";

    // Headers HTTP
    public static final String AUTHORIZATION_HEADER = "Authorization";
    public static final String BEARER_PREFIX = "Bearer ";

    // Formatos de data
    public static final String DATE_FORMAT = "yyyy-MM-dd";
    public static final String DATETIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
    public static final String TIMESTAMP_FORMAT = "yyyy-MM-dd'T'HH:mm:ss.SSS";

    // Limites de arquivo
    public static final long MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
    public static final String[] ALLOWED_IMAGE_TYPES = {"image/jpeg", "image/jpg", "image/png", "image/webp"};

    // Configurações de paginação
    public static final int DEFAULT_PAGE_SIZE = 20;
    public static final int MAX_PAGE_SIZE = 100;

    // Configurações de cache
    public static final int CACHE_TTL_SECONDS = 3600; // 1 hora
    public static final String CACHE_EXCURSOES = "excursoes";
    public static final String CACHE_DASHBOARD = "dashboard";

    // Templates de email
    public static final String EMAIL_CONFIRMACAO_INSCRICAO = "email/confirmacao-inscricao";
    public static final String EMAIL_CONFIRMACAO_PAGAMENTO = "email/confirmacao-pagamento";
    public static final String EMAIL_NOTIFICACAO_PERSONALIZADA = "email/notificacao-personalizada";

    // Mensagens padrão
    public static final String MSG_RECURSO_NAO_ENCONTRADO = "Recurso não encontrado";
    public static final String MSG_ACESSO_NEGADO = "Acesso negado";
    public static final String MSG_ERRO_INTERNO = "Erro interno do servidor";
    public static final String MSG_VALIDACAO_ERRO = "Erro de validação";

    // Status de resposta
    public static final String STATUS_SUCCESS = "success";
    public static final String STATUS_ERROR = "error";
    public static final String STATUS_WARNING = "warning";

    // Regex patterns
    public static final String PHONE_PATTERN = "^\\(?\\d{2}\\)?[\\s-]?\\d{4,5}[\\s-]?\\d{4}$";
    public static final String CPF_PATTERN = "^\\d{3}\\.?\\d{3}\\.?\\d{3}-?\\d{2}$";
    public static final String CNPJ_PATTERN = "^\\d{2}\\.?\\d{3}\\.?\\d{3}/?\\d{4}-?\\d{2}$";

    private Constants() {
        // Utility class - não instanciar
    }
}

//src/main/java/br/com/tourapp/util/ValidationUtil.java
package br.com.tourapp.util;

import java.util.regex.Pattern;

/**
 * Utilitários para validação
 */
public final class ValidationUtil {

    private static final Pattern EMAIL_PATTERN = Pattern.compile(
        "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    );

    private static final Pattern PHONE_PATTERN = Pattern.compile(Constants.PHONE_PATTERN);
    private static final Pattern CPF_PATTERN = Pattern.compile(Constants.CPF_PATTERN);
    private static final Pattern CNPJ_PATTERN = Pattern.compile(Constants.CNPJ_PATTERN);

    private ValidationUtil() {
        // Utility class
    }

    /**
     * Valida se o email tem formato válido
     */
    public static boolean isValidEmail(String email) {
        return email != null && EMAIL_PATTERN.matcher(email).matches();
    }

    /**
     * Valida se o telefone tem formato válido
     */
    public static boolean isValidPhone(String phone) {
        return phone != null && PHONE_PATTERN.matcher(phone).matches();
    }

    /**
     * Valida se o CPF tem formato válido (apenas formato, não dígitos)
     */
    public static boolean isValidCpfFormat(String cpf) {
        return cpf != null && CPF_PATTERN.matcher(cpf).matches();
    }

    /**
     * Valida se o CNPJ tem formato válido (apenas formato, não dígitos)
     */
    public static boolean isValidCnpjFormat(String cnpj) {
        return cnpj != null && CNPJ_PATTERN.matcher(cnpj).matches();
    }

    /**
     * Remove caracteres especiais de CPF/CNPJ
     */
    public static String removeSpecialCharacters(String value) {
        return value != null ? value.replaceAll("[^0-9]", "") : null;
    }

    /**
     * Valida se a senha atende aos critérios mínimos
     */
    public static boolean isValidPassword(String password) {
        if (password == null || password.length() < 6) {
            return false;
        }

        // Pelo menos uma letra e um número
        boolean hasLetter = password.matches(".*[a-zA-Z].*");
        boolean hasNumber = password.matches(".*[0-9].*");

        return hasLetter && hasNumber;
    }

    /**
     * Valida se o tipo de arquivo é uma imagem permitida
     */
    public static boolean isValidImageType(String contentType) {
        if (contentType == null) {
            return false;
        }

        for (String allowedType : Constants.ALLOWED_IMAGE_TYPES) {
            if (contentType.equals(allowedType)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Valida se o tamanho do arquivo está dentro do limite
     */
    public static boolean isValidFileSize(long fileSize) {
        return fileSize > 0 && fileSize <= Constants.MAX_FILE_SIZE;
    }
}

//src/main/java/br/com/tourapp/util/DateUtil.java
package br.com.tourapp.util;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

/**
 * Utilitários para manipulação de datas
 */
public final class DateUtil {

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern(Constants.DATE_FORMAT);
    private static final DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern(Constants.DATETIME_FORMAT);

    private DateUtil() {
        // Utility class
    }

    /**
     * Formata LocalDate para string
     */
    public static String formatDate(LocalDate date) {
        return date != null ? date.format(DATE_FORMATTER) : null;
    }

    /**
     * Formata LocalDateTime para string
     */
    public static String formatDateTime(LocalDateTime dateTime) {
        return dateTime != null ? dateTime.format(DATETIME_FORMATTER) : null;
    }

    /**
     * Parse string para LocalDate
     */
    public static LocalDate parseDate(String dateStr) {
        return dateStr != null ? LocalDate.parse(dateStr, DATE_FORMATTER) : null;
    }

    /**
     * Parse string para LocalDateTime
     */
    public static LocalDateTime parseDateTime(String dateTimeStr) {
        return dateTimeStr != null ? LocalDateTime.parse(dateTimeStr, DATETIME_FORMATTER) : null;
    }

    /**
     * Retorna o início do dia
     */
    public static LocalDateTime startOfDay(LocalDate date) {
        return date != null ? date.atStartOfDay() : null;
    }

    /**
     * Retorna o fim do dia
     */
    public static LocalDateTime endOfDay(LocalDate date) {
        return date != null ? date.atTime(23, 59, 59, 999999999) : null;
    }

    /**
     * Calcula a diferença em dias entre duas datas
     */
    public static long daysBetween(LocalDate start, LocalDate end) {
        return start != null && end != null ? ChronoUnit.DAYS.between(start, end) : 0;
    }

    /**
     * Calcula a diferença em horas entre duas datas
     */
    public static long hoursBetween(LocalDateTime start, LocalDateTime end) {
        return start != null && end != null ? ChronoUnit.HOURS.between(start, end) : 0;
    }

    /**
     * Verifica se a data está no futuro
     */
    public static boolean isFuture(LocalDateTime dateTime) {
        return dateTime != null && dateTime.isAfter(LocalDateTime.now());
    }

    /**
     * Verifica se a data está no passado
     */
    public static boolean isPast(LocalDateTime dateTime) {
        return dateTime != null && dateTime.isBefore(LocalDateTime.now());
    }

    /**
     * Adiciona dias a uma data
     */
    public static LocalDate addDays(LocalDate date, int days) {
        return date != null ? date.plusDays(days) : null;
    }

    /**
     * Adiciona horas a uma data
     */
    public static LocalDateTime addHours(LocalDateTime dateTime, int hours) {
        return dateTime != null ? dateTime.plusHours(hours) : null;
    }

    /**
     * Retorna o primeiro dia do mês atual
     */
    public static LocalDate firstDayOfCurrentMonth() {
        return LocalDate.now().withDayOfMonth(1);
    }

    /**
     * Retorna o último dia do mês atual
     */
    public static LocalDate lastDayOfCurrentMonth() {
        LocalDate now = LocalDate.now();
        return now.withDayOfMonth(now.lengthOfMonth());
    }
}

//src/main/java/br/com/tourapp/util/StringUtil.java
package br.com.tourapp.util;

import java.text.Normalizer;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Utilitários para manipulação de strings
 */
public final class StringUtil {

    private StringUtil() {
        // Utility class
    }

    /**
     * Verifica se a string é nula ou vazia
     */
    public static boolean isEmpty(String str) {
        return str == null || str.trim().isEmpty();
    }

    /**
     * Verifica se a string não é nula e não está vazia
     */
    public static boolean isNotEmpty(String str) {
        return !isEmpty(str);
    }

    /**
     * Remove acentos de uma string
     */
    public static String removeAccents(String str) {
        if (isEmpty(str)) {
            return str;
        }

        String normalized = Normalizer.normalize(str, Normalizer.Form.NFD);
        return normalized.replaceAll("\\p{M}", "");
    }

    /**
     * Converte para slug (URL-friendly)
     */
    public static String toSlug(String str) {
        if (isEmpty(str)) {
            return "";
        }

        return removeAccents(str)
                .toLowerCase()
                .replaceAll("[^a-z0-9\\s-]", "")
                .replaceAll("\\s+", "-")
                .replaceAll("-+", "-")
                .replaceAll("^-|-$", "");
    }

    /**
     * Capitaliza a primeira letra
     */
    public static String capitalize(String str) {
        if (isEmpty(str)) {
            return str;
        }

        return str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase();
    }

    /**
     * Capitaliza cada palavra
     */
    public static String capitalizeWords(String str) {
        if (isEmpty(str)) {
            return str;
        }

        return Arrays.stream(str.split("\\s+"))
                .map(StringUtil::capitalize)
                .collect(Collectors.joining(" "));
    }

    /**
     * Trunca string com reticências
     */
    public static String truncate(String str, int maxLength) {
        if (isEmpty(str) || str.length() <= maxLength) {
            return str;
        }

        return str.substring(0, maxLength - 3) + "...";
    }

    /**
     * Máscara para CPF
     */
    public static String maskCpf(String cpf) {
        if (isEmpty(cpf)) {
            return cpf;
        }

        String digits = cpf.replaceAll("[^0-9]", "");
        if (digits.length() != 11) {
            return cpf;
        }

        return digits.replaceAll("(\\d{3})(\\d{3})(\\d{3})(\\d{2})", "$1.$2.$3-$4");
    }

    /**
     * Máscara para CNPJ
     */
    public static String maskCnpj(String cnpj) {
        if (isEmpty(cnpj)) {
            return cnpj;
        }

        String digits = cnpj.replaceAll("[^0-9]", "");
        if (digits.length() != 14) {
            return cnpj;
        }

        return digits.replaceAll("(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})", "$1.$2.$3/$4-$5");
    }

    /**
     * Máscara para telefone
     */
    public static String maskPhone(String phone) {
        if (isEmpty(phone)) {
            return phone;
        }

        String digits = phone.replaceAll("[^0-9]", "");

        if (digits.length() == 11) { // Celular
            return digits.replaceAll("(\\d{2})(\\d{5})(\\d{4})", "($1) $2-$3");
        } else if (digits.length() == 10) { // Fixo
            return digits.replaceAll("(\\d{2})(\\d{4})(\\d{4})", "($1) $2-$3");
        }

        return phone;
    }

    /**
     * Gera uma string aleatória
     */
    public static String randomString(int length) {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < length; i++) {
            int index = (int) (Math.random() * chars.length());
            sb.append(chars.charAt(index));
        }

        return sb.toString();
    }

    /**
     * Converte lista de strings em string separada por vírgulas
     */
    public static String join(List<String> list, String delimiter) {
        if (list == null || list.isEmpty()) {
            return "";
        }

        return String.join(delimiter, list);
    }

    /**
     * Converte string separada por vírgulas em lista
     */
    public static List<String> split(String str, String delimiter) {
        if (isEmpty(str)) {
            return List.of();
        }

        return Arrays.stream(str.split(delimiter))
                .map(String::trim)
                .filter(StringUtil::isNotEmpty)
                .collect(Collectors.toList());
    }
}