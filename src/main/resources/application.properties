# Application
spring.application.name=tourapp
server.port=${PORT:8080}
server.servlet.context-path=/api/v1

# Database
my.db.schemaname=tourapp

spring.jpa.properties.hibernate.default_schema=${my.db.schemaname}
spring.liquibase.default-schema=${my.db.schemaname}
spring.liquibase.liquibase-schema=${my.db.schemaname}

spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432}
spring.datasource.username=${DB_USER:tourapp}
spring.datasource.password=${DB_PASSWORD:}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false

# Liquibase
spring.liquibase.change-log=classpath:db/changelog/db.changelog-master.xml
spring.liquibase.enabled=true

# JWT
app.jwt.secret=${JWT_SECRET:chave-super-secreta-minimo-256-bits-para-hs256-funcionar-corretamente}
app.jwt.expiration=${JWT_EXPIRATION:86400000}
app.jwt.refresh-expiration=604800000

# Mercado Pago
app.mercadopago.access-token=${MERCADOPAGO_ACCESS_TOKEN:}
app.mercadopago.public-key=${MERCADOPAGO_PUBLIC_KEY:}
app.mercadopago.webhook-secret=${MERCADOPAGO_WEBHOOK_SECRET:}

# AWS S3
app.aws.access-key=${AWS_ACCESS_KEY:XYZ}
app.aws.secret-key=${AWS_SECRET_KEY:XYZ}
app.aws.region=${AWS_REGION:us-east-1}
app.aws.s3.bucket-name=${AWS_S3_BUCKET_NAME:XYZ}

# Firebase
app.firebase.service-account-path=${FIREBASE_SERVICE_ACCOUNT_PATH:classpath:firebase-service-account.json}

# Mail
spring.mail.host=${MAIL_HOST:smtp.gmail.com}
spring.mail.port=${MAIL_PORT:587}
spring.mail.username=${MAIL_USERNAME:}
spring.mail.password=${MAIL_PASSWORD:}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Cache
app.cache.enabled=${CACHE_ENABLED:true}

# CORS
app.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:3001}
app.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,PATCH,OPTIONS}
app.cors.allowed-headers=${CORS_ALLOWED_HEADERS:*}
app.cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}

# Logging
logging.level.br.com.tourapp=DEBUG
logging.level.org.springframework.security=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Logging - CONFIGURA  O MELHORADA PARA DEBUG
logging.level.com.tourapp=DEBUG
logging.level.com.tourapp.config.security.GoogleTokenVerifier=DEBUG
logging.level.com.tourapp.service.UserService=DEBUG
logging.level.com.tourapp.controller.AuthController=DEBUG
logging.level.org.springframework.web=INFO
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - [%thread] %-5level %logger{36} - %msg%n

# ==============================================
# TOUR APPLICATION - CONFIGURA  O CORRIGIDA
# ==============================================

# Application
spring.profiles.active=${SPRING_PROFILES_ACTIVE:dev}

# H2 Console
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# Jackson JSON
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.time-zone=UTC
spring.jackson.default-property-inclusion=non_null

# Management/Actuator
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.endpoint.health.show-components=always
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true

# SpringDoc/Swagger
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operations-sorter=method
springdoc.swagger-ui.try-it-out-enabled=true

# File Upload
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# Google OAuth2 Configuration - ESSENCIAL PARA VALIDA  O DO GOOGLE ID TOKEN
google.client-id=${GOOGLE_CLIENT_ID:sua_google_client_id_aqui}

# Spring Security OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:sua_google_client_id_aqui}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:sua_google_client_secret_aqui}
spring.security.oauth2.client.registration.google.scope=openid,email,profile

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub
spring.security.oauth2.client.provider.google.jwk-set-uri=https://www.googleapis.com/oauth2/v3/certs

# OAuth2 Redirect Configuration
app.oauth2.redirectUri=${OAUTH2_REDIRECT_URI:http://localhost:3000/auth/callback}

# Frontend URL
app.frontend-url=${FRONT_URL:http://localhost:3000}

# Server Configuration

server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=30s

# CORS Configuration (j  est  no SecurityConfig, mas pode ser  til)
# spring.web.cors.allowed-origins=http://localhost:3000
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=true